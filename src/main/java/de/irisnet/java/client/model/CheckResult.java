/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.irisnet.java.client.model.ApiNotice;
import de.irisnet.java.client.model.BrokenRule;
import de.irisnet.java.client.model.Detection;
import de.irisnet.java.client.model.Encoded;
import de.irisnet.java.client.model.Event;
import de.irisnet.java.client.model.Summary;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.irisnet.java.JSON;

/**
 * The root object returned after a check operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class CheckResult {
  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  @javax.annotation.Nullable
  private Summary summary;

  public static final String SERIALIZED_NAME_ENCODINGS = "encodings";
  @SerializedName(SERIALIZED_NAME_ENCODINGS)
  @javax.annotation.Nullable
  private List<Encoded> encodings = new ArrayList<>();

  public static final String SERIALIZED_NAME_BROKEN_RULES = "brokenRules";
  @SerializedName(SERIALIZED_NAME_BROKEN_RULES)
  @javax.annotation.Nullable
  private List<BrokenRule> brokenRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTIONS = "detections";
  @SerializedName(SERIALIZED_NAME_DETECTIONS)
  @javax.annotation.Nullable
  private List<Detection> detections = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  @javax.annotation.Nullable
  private List<Event> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  @javax.annotation.Nullable
  private List<ApiNotice> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_ID = "checkId";
  @SerializedName(SERIALIZED_NAME_CHECK_ID)
  @javax.annotation.Nullable
  private String checkId;

  public CheckResult() {
  }

  public CheckResult summary(@javax.annotation.Nullable Summary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public Summary getSummary() {
    return summary;
  }

  public void setSummary(@javax.annotation.Nullable Summary summary) {
    this.summary = summary;
  }


  public CheckResult encodings(@javax.annotation.Nullable List<Encoded> encodings) {
    this.encodings = encodings;
    return this;
  }

  public CheckResult addEncodingsItem(Encoded encodingsItem) {
    if (this.encodings == null) {
      this.encodings = new ArrayList<>();
    }
    this.encodings.add(encodingsItem);
    return this;
  }

  /**
   * Get encodings
   * @return encodings
   */
  @javax.annotation.Nullable
  public List<Encoded> getEncodings() {
    return encodings;
  }

  public void setEncodings(@javax.annotation.Nullable List<Encoded> encodings) {
    this.encodings = encodings;
  }


  public CheckResult brokenRules(@javax.annotation.Nullable List<BrokenRule> brokenRules) {
    this.brokenRules = brokenRules;
    return this;
  }

  public CheckResult addBrokenRulesItem(BrokenRule brokenRulesItem) {
    if (this.brokenRules == null) {
      this.brokenRules = new ArrayList<>();
    }
    this.brokenRules.add(brokenRulesItem);
    return this;
  }

  /**
   * Get brokenRules
   * @return brokenRules
   */
  @javax.annotation.Nullable
  public List<BrokenRule> getBrokenRules() {
    return brokenRules;
  }

  public void setBrokenRules(@javax.annotation.Nullable List<BrokenRule> brokenRules) {
    this.brokenRules = brokenRules;
  }


  public CheckResult detections(@javax.annotation.Nullable List<Detection> detections) {
    this.detections = detections;
    return this;
  }

  public CheckResult addDetectionsItem(Detection detectionsItem) {
    if (this.detections == null) {
      this.detections = new ArrayList<>();
    }
    this.detections.add(detectionsItem);
    return this;
  }

  /**
   * Get detections
   * @return detections
   */
  @javax.annotation.Nullable
  public List<Detection> getDetections() {
    return detections;
  }

  public void setDetections(@javax.annotation.Nullable List<Detection> detections) {
    this.detections = detections;
  }


  public CheckResult events(@javax.annotation.Nullable List<Event> events) {
    this.events = events;
    return this;
  }

  public CheckResult addEventsItem(Event eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   * @return events
   */
  @javax.annotation.Nullable
  public List<Event> getEvents() {
    return events;
  }

  public void setEvents(@javax.annotation.Nullable List<Event> events) {
    this.events = events;
  }


  public CheckResult notifications(@javax.annotation.Nullable List<ApiNotice> notifications) {
    this.notifications = notifications;
    return this;
  }

  public CheckResult addNotificationsItem(ApiNotice notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<ApiNotice> getNotifications() {
    return notifications;
  }

  public void setNotifications(@javax.annotation.Nullable List<ApiNotice> notifications) {
    this.notifications = notifications;
  }


  public CheckResult checkId(@javax.annotation.Nullable String checkId) {
    this.checkId = checkId;
    return this;
  }

  /**
   * The id of the async running check
   * @return checkId
   */
  @javax.annotation.Nullable
  public String getCheckId() {
    return checkId;
  }

  public void setCheckId(@javax.annotation.Nullable String checkId) {
    this.checkId = checkId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckResult checkResult = (CheckResult) o;
    return Objects.equals(this.summary, checkResult.summary) &&
        Objects.equals(this.encodings, checkResult.encodings) &&
        Objects.equals(this.brokenRules, checkResult.brokenRules) &&
        Objects.equals(this.detections, checkResult.detections) &&
        Objects.equals(this.events, checkResult.events) &&
        Objects.equals(this.notifications, checkResult.notifications) &&
        Objects.equals(this.checkId, checkResult.checkId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(summary, encodings, brokenRules, detections, events, notifications, checkId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckResult {\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    encodings: ").append(toIndentedString(encodings)).append("\n");
    sb.append("    brokenRules: ").append(toIndentedString(brokenRules)).append("\n");
    sb.append("    detections: ").append(toIndentedString(detections)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    checkId: ").append(toIndentedString(checkId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("summary");
    openapiFields.add("encodings");
    openapiFields.add("brokenRules");
    openapiFields.add("detections");
    openapiFields.add("events");
    openapiFields.add("notifications");
    openapiFields.add("checkId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckResult is not found in the empty JSON string", CheckResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `summary`
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) {
        Summary.validateJsonElement(jsonObj.get("summary"));
      }
      if (jsonObj.get("encodings") != null && !jsonObj.get("encodings").isJsonNull()) {
        JsonArray jsonArrayencodings = jsonObj.getAsJsonArray("encodings");
        if (jsonArrayencodings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encodings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encodings` to be an array in the JSON string but got `%s`", jsonObj.get("encodings").toString()));
          }

          // validate the optional field `encodings` (array)
          for (int i = 0; i < jsonArrayencodings.size(); i++) {
            Encoded.validateJsonElement(jsonArrayencodings.get(i));
          };
        }
      }
      if (jsonObj.get("brokenRules") != null && !jsonObj.get("brokenRules").isJsonNull()) {
        JsonArray jsonArraybrokenRules = jsonObj.getAsJsonArray("brokenRules");
        if (jsonArraybrokenRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("brokenRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `brokenRules` to be an array in the JSON string but got `%s`", jsonObj.get("brokenRules").toString()));
          }

          // validate the optional field `brokenRules` (array)
          for (int i = 0; i < jsonArraybrokenRules.size(); i++) {
            BrokenRule.validateJsonElement(jsonArraybrokenRules.get(i));
          };
        }
      }
      if (jsonObj.get("detections") != null && !jsonObj.get("detections").isJsonNull()) {
        JsonArray jsonArraydetections = jsonObj.getAsJsonArray("detections");
        if (jsonArraydetections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detections` to be an array in the JSON string but got `%s`", jsonObj.get("detections").toString()));
          }

          // validate the optional field `detections` (array)
          for (int i = 0; i < jsonArraydetections.size(); i++) {
            Detection.validateJsonElement(jsonArraydetections.get(i));
          };
        }
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            Event.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            ApiNotice.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if ((jsonObj.get("checkId") != null && !jsonObj.get("checkId").isJsonNull()) && !jsonObj.get("checkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckResult>() {
           @Override
           public void write(JsonWriter out, CheckResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckResult
   * @throws IOException if the JSON string is invalid with respect to CheckResult
   */
  public static CheckResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckResult.class);
  }

  /**
   * Convert an instance of CheckResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

