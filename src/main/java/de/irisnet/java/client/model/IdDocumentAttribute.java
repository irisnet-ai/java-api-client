/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.irisnet.java.JSON;

/**
 * Attributes qualifying the _idDocument_ classification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class IdDocumentAttribute {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  /**
   * The type of the document
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    PASSPORT("passport"),
    
    DRIVING_LICENSE("driving_license"),
    
    NATIONAL_IDENTITY_CARD("national_identity_card"),
    
    RESIDENCE_PERMIT("residence_permit"),
    
    VISA("visa"),
    
    BANK_STATEMENT("bank_statement"),
    
    UTILITY_BILL("utility_bill"),
    
    TAX_DOCUMENT("tax_document"),
    
    UNIDENTIFIED("unidentified"),
    
    UNKNOWN("unknown");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  @javax.annotation.Nullable
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "documentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  @javax.annotation.Nullable
  private String documentNumber;

  public static final String SERIALIZED_NAME_IS_TWO_SIDED = "isTwoSided";
  @SerializedName(SERIALIZED_NAME_IS_TWO_SIDED)
  @javax.annotation.Nullable
  private Boolean isTwoSided;

  public static final String SERIALIZED_NAME_ISSUING_AUTHORITY = "issuingAuthority";
  @SerializedName(SERIALIZED_NAME_ISSUING_AUTHORITY)
  @javax.annotation.Nullable
  private String issuingAuthority;

  public static final String SERIALIZED_NAME_ISSUING_DATE = "issuingDate";
  @SerializedName(SERIALIZED_NAME_ISSUING_DATE)
  @javax.annotation.Nullable
  private LocalDate issuingDate;

  public static final String SERIALIZED_NAME_ISSUING_COUNTRY = "issuingCountry";
  @SerializedName(SERIALIZED_NAME_ISSUING_COUNTRY)
  @javax.annotation.Nullable
  private String issuingCountry;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  @javax.annotation.Nullable
  private LocalDate expirationDate;

  public static final String SERIALIZED_NAME_ACCESS_NUMBER = "accessNumber";
  @SerializedName(SERIALIZED_NAME_ACCESS_NUMBER)
  @javax.annotation.Nullable
  private String accessNumber;

  public static final String SERIALIZED_NAME_FIRST_NAMES = "firstNames";
  @SerializedName(SERIALIZED_NAME_FIRST_NAMES)
  @javax.annotation.Nullable
  private List<String> firstNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_NAMES = "lastNames";
  @SerializedName(SERIALIZED_NAME_LAST_NAMES)
  @javax.annotation.Nullable
  private List<String> lastNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIRTH_NAME = "birthName";
  @SerializedName(SERIALIZED_NAME_BIRTH_NAME)
  @javax.annotation.Nullable
  private String birthName;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  @javax.annotation.Nullable
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_PLACE_OF_BIRTH = "placeOfBirth";
  @SerializedName(SERIALIZED_NAME_PLACE_OF_BIRTH)
  @javax.annotation.Nullable
  private String placeOfBirth;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  @javax.annotation.Nullable
  private String nationality;

  /**
   * The document holder&#39;s gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    MALE("male"),
    
    FEMALE("female"),
    
    OTHER("other");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  @javax.annotation.Nullable
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  @javax.annotation.Nullable
  private String height;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address;

  public static final String SERIALIZED_NAME_MACHINE_READABLE_ZONE = "machineReadableZone";
  @SerializedName(SERIALIZED_NAME_MACHINE_READABLE_ZONE)
  @javax.annotation.Nullable
  private List<String> machineReadableZone = new ArrayList<>();

  public IdDocumentAttribute() {
  }

  public IdDocumentAttribute type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Used as a type discriminator for json to object conversion.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public IdDocumentAttribute documentType(@javax.annotation.Nullable DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The type of the document
   * @return documentType
   */
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(@javax.annotation.Nullable DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public IdDocumentAttribute documentNumber(@javax.annotation.Nullable String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * The number of the document
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(@javax.annotation.Nullable String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public IdDocumentAttribute isTwoSided(@javax.annotation.Nullable Boolean isTwoSided) {
    this.isTwoSided = isTwoSided;
    return this;
  }

  /**
   * Indicates whether the document is two-sided
   * @return isTwoSided
   */
  @javax.annotation.Nullable
  public Boolean getIsTwoSided() {
    return isTwoSided;
  }

  public void setIsTwoSided(@javax.annotation.Nullable Boolean isTwoSided) {
    this.isTwoSided = isTwoSided;
  }


  public IdDocumentAttribute issuingAuthority(@javax.annotation.Nullable String issuingAuthority) {
    this.issuingAuthority = issuingAuthority;
    return this;
  }

  /**
   * The issuing authority
   * @return issuingAuthority
   */
  @javax.annotation.Nullable
  public String getIssuingAuthority() {
    return issuingAuthority;
  }

  public void setIssuingAuthority(@javax.annotation.Nullable String issuingAuthority) {
    this.issuingAuthority = issuingAuthority;
  }


  public IdDocumentAttribute issuingDate(@javax.annotation.Nullable LocalDate issuingDate) {
    this.issuingDate = issuingDate;
    return this;
  }

  /**
   * The issuing date
   * @return issuingDate
   */
  @javax.annotation.Nullable
  public LocalDate getIssuingDate() {
    return issuingDate;
  }

  public void setIssuingDate(@javax.annotation.Nullable LocalDate issuingDate) {
    this.issuingDate = issuingDate;
  }


  public IdDocumentAttribute issuingCountry(@javax.annotation.Nullable String issuingCountry) {
    this.issuingCountry = issuingCountry;
    return this;
  }

  /**
   * The document&#39;s country in ISO 3166-1 alpha-2 format
   * @return issuingCountry
   */
  @javax.annotation.Nullable
  public String getIssuingCountry() {
    return issuingCountry;
  }

  public void setIssuingCountry(@javax.annotation.Nullable String issuingCountry) {
    this.issuingCountry = issuingCountry;
  }


  public IdDocumentAttribute expirationDate(@javax.annotation.Nullable LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * The expiration date
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(@javax.annotation.Nullable LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public IdDocumentAttribute accessNumber(@javax.annotation.Nullable String accessNumber) {
    this.accessNumber = accessNumber;
    return this;
  }

  /**
   * The access number
   * @return accessNumber
   */
  @javax.annotation.Nullable
  public String getAccessNumber() {
    return accessNumber;
  }

  public void setAccessNumber(@javax.annotation.Nullable String accessNumber) {
    this.accessNumber = accessNumber;
  }


  public IdDocumentAttribute firstNames(@javax.annotation.Nullable List<String> firstNames) {
    this.firstNames = firstNames;
    return this;
  }

  public IdDocumentAttribute addFirstNamesItem(String firstNamesItem) {
    if (this.firstNames == null) {
      this.firstNames = new ArrayList<>();
    }
    this.firstNames.add(firstNamesItem);
    return this;
  }

  /**
   * The document holder&#39;s first name(s)
   * @return firstNames
   */
  @javax.annotation.Nullable
  public List<String> getFirstNames() {
    return firstNames;
  }

  public void setFirstNames(@javax.annotation.Nullable List<String> firstNames) {
    this.firstNames = firstNames;
  }


  public IdDocumentAttribute lastNames(@javax.annotation.Nullable List<String> lastNames) {
    this.lastNames = lastNames;
    return this;
  }

  public IdDocumentAttribute addLastNamesItem(String lastNamesItem) {
    if (this.lastNames == null) {
      this.lastNames = new ArrayList<>();
    }
    this.lastNames.add(lastNamesItem);
    return this;
  }

  /**
   * The document holder&#39;s last name(s)
   * @return lastNames
   */
  @javax.annotation.Nullable
  public List<String> getLastNames() {
    return lastNames;
  }

  public void setLastNames(@javax.annotation.Nullable List<String> lastNames) {
    this.lastNames = lastNames;
  }


  public IdDocumentAttribute birthName(@javax.annotation.Nullable String birthName) {
    this.birthName = birthName;
    return this;
  }

  /**
   * The document holder&#39;s birth name
   * @return birthName
   */
  @javax.annotation.Nullable
  public String getBirthName() {
    return birthName;
  }

  public void setBirthName(@javax.annotation.Nullable String birthName) {
    this.birthName = birthName;
  }


  public IdDocumentAttribute dateOfBirth(@javax.annotation.Nullable LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The document holder&#39;s date of birth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(@javax.annotation.Nullable LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public IdDocumentAttribute placeOfBirth(@javax.annotation.Nullable String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
    return this;
  }

  /**
   * The document holder&#39;s place of birth
   * @return placeOfBirth
   */
  @javax.annotation.Nullable
  public String getPlaceOfBirth() {
    return placeOfBirth;
  }

  public void setPlaceOfBirth(@javax.annotation.Nullable String placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
  }


  public IdDocumentAttribute nationality(@javax.annotation.Nullable String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * The document holder&#39;s nationality in ISO 3166-1 alpha-2 format
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(@javax.annotation.Nullable String nationality) {
    this.nationality = nationality;
  }


  public IdDocumentAttribute gender(@javax.annotation.Nullable GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The document holder&#39;s gender
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(@javax.annotation.Nullable GenderEnum gender) {
    this.gender = gender;
  }


  public IdDocumentAttribute height(@javax.annotation.Nullable String height) {
    this.height = height;
    return this;
  }

  /**
   * The document holder&#39;s height
   * @return height
   */
  @javax.annotation.Nullable
  public String getHeight() {
    return height;
  }

  public void setHeight(@javax.annotation.Nullable String height) {
    this.height = height;
  }


  public IdDocumentAttribute address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * The document holder&#39;s address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public IdDocumentAttribute machineReadableZone(@javax.annotation.Nullable List<String> machineReadableZone) {
    this.machineReadableZone = machineReadableZone;
    return this;
  }

  public IdDocumentAttribute addMachineReadableZoneItem(String machineReadableZoneItem) {
    if (this.machineReadableZone == null) {
      this.machineReadableZone = new ArrayList<>();
    }
    this.machineReadableZone.add(machineReadableZoneItem);
    return this;
  }

  /**
   * The document&#39;s machine readable zone (MRZ), at most 3 lines
   * @return machineReadableZone
   */
  @javax.annotation.Nullable
  public List<String> getMachineReadableZone() {
    return machineReadableZone;
  }

  public void setMachineReadableZone(@javax.annotation.Nullable List<String> machineReadableZone) {
    this.machineReadableZone = machineReadableZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdDocumentAttribute idDocumentAttribute = (IdDocumentAttribute) o;
    return Objects.equals(this.type, idDocumentAttribute.type) &&
        Objects.equals(this.documentType, idDocumentAttribute.documentType) &&
        Objects.equals(this.documentNumber, idDocumentAttribute.documentNumber) &&
        Objects.equals(this.isTwoSided, idDocumentAttribute.isTwoSided) &&
        Objects.equals(this.issuingAuthority, idDocumentAttribute.issuingAuthority) &&
        Objects.equals(this.issuingDate, idDocumentAttribute.issuingDate) &&
        Objects.equals(this.issuingCountry, idDocumentAttribute.issuingCountry) &&
        Objects.equals(this.expirationDate, idDocumentAttribute.expirationDate) &&
        Objects.equals(this.accessNumber, idDocumentAttribute.accessNumber) &&
        Objects.equals(this.firstNames, idDocumentAttribute.firstNames) &&
        Objects.equals(this.lastNames, idDocumentAttribute.lastNames) &&
        Objects.equals(this.birthName, idDocumentAttribute.birthName) &&
        Objects.equals(this.dateOfBirth, idDocumentAttribute.dateOfBirth) &&
        Objects.equals(this.placeOfBirth, idDocumentAttribute.placeOfBirth) &&
        Objects.equals(this.nationality, idDocumentAttribute.nationality) &&
        Objects.equals(this.gender, idDocumentAttribute.gender) &&
        Objects.equals(this.height, idDocumentAttribute.height) &&
        Objects.equals(this.address, idDocumentAttribute.address) &&
        Objects.equals(this.machineReadableZone, idDocumentAttribute.machineReadableZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, documentType, documentNumber, isTwoSided, issuingAuthority, issuingDate, issuingCountry, expirationDate, accessNumber, firstNames, lastNames, birthName, dateOfBirth, placeOfBirth, nationality, gender, height, address, machineReadableZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdDocumentAttribute {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    isTwoSided: ").append(toIndentedString(isTwoSided)).append("\n");
    sb.append("    issuingAuthority: ").append(toIndentedString(issuingAuthority)).append("\n");
    sb.append("    issuingDate: ").append(toIndentedString(issuingDate)).append("\n");
    sb.append("    issuingCountry: ").append(toIndentedString(issuingCountry)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    accessNumber: ").append(toIndentedString(accessNumber)).append("\n");
    sb.append("    firstNames: ").append(toIndentedString(firstNames)).append("\n");
    sb.append("    lastNames: ").append(toIndentedString(lastNames)).append("\n");
    sb.append("    birthName: ").append(toIndentedString(birthName)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    placeOfBirth: ").append(toIndentedString(placeOfBirth)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    machineReadableZone: ").append(toIndentedString(machineReadableZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("documentType");
    openapiFields.add("documentNumber");
    openapiFields.add("isTwoSided");
    openapiFields.add("issuingAuthority");
    openapiFields.add("issuingDate");
    openapiFields.add("issuingCountry");
    openapiFields.add("expirationDate");
    openapiFields.add("accessNumber");
    openapiFields.add("firstNames");
    openapiFields.add("lastNames");
    openapiFields.add("birthName");
    openapiFields.add("dateOfBirth");
    openapiFields.add("placeOfBirth");
    openapiFields.add("nationality");
    openapiFields.add("gender");
    openapiFields.add("height");
    openapiFields.add("address");
    openapiFields.add("machineReadableZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdDocumentAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdDocumentAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdDocumentAttribute is not found in the empty JSON string", IdDocumentAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdDocumentAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdDocumentAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the optional field `documentType`
      if (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) {
        DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      }
      if ((jsonObj.get("documentNumber") != null && !jsonObj.get("documentNumber").isJsonNull()) && !jsonObj.get("documentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentNumber").toString()));
      }
      if ((jsonObj.get("issuingAuthority") != null && !jsonObj.get("issuingAuthority").isJsonNull()) && !jsonObj.get("issuingAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingAuthority").toString()));
      }
      if ((jsonObj.get("issuingCountry") != null && !jsonObj.get("issuingCountry").isJsonNull()) && !jsonObj.get("issuingCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuingCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuingCountry").toString()));
      }
      if ((jsonObj.get("accessNumber") != null && !jsonObj.get("accessNumber").isJsonNull()) && !jsonObj.get("accessNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("firstNames") != null && !jsonObj.get("firstNames").isJsonNull() && !jsonObj.get("firstNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstNames` to be an array in the JSON string but got `%s`", jsonObj.get("firstNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lastNames") != null && !jsonObj.get("lastNames").isJsonNull() && !jsonObj.get("lastNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastNames` to be an array in the JSON string but got `%s`", jsonObj.get("lastNames").toString()));
      }
      if ((jsonObj.get("birthName") != null && !jsonObj.get("birthName").isJsonNull()) && !jsonObj.get("birthName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthName").toString()));
      }
      if ((jsonObj.get("placeOfBirth") != null && !jsonObj.get("placeOfBirth").isJsonNull()) && !jsonObj.get("placeOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeOfBirth").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("gender"));
      }
      if ((jsonObj.get("height") != null && !jsonObj.get("height").isJsonNull()) && !jsonObj.get("height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("height").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("machineReadableZone") != null && !jsonObj.get("machineReadableZone").isJsonNull() && !jsonObj.get("machineReadableZone").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineReadableZone` to be an array in the JSON string but got `%s`", jsonObj.get("machineReadableZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdDocumentAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdDocumentAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdDocumentAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdDocumentAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<IdDocumentAttribute>() {
           @Override
           public void write(JsonWriter out, IdDocumentAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdDocumentAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdDocumentAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdDocumentAttribute
   * @throws IOException if the JSON string is invalid with respect to IdDocumentAttribute
   */
  public static IdDocumentAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdDocumentAttribute.class);
  }

  /**
   * Convert an instance of IdDocumentAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

