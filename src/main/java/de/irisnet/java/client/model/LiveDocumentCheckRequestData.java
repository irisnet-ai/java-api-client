/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.irisnet.java.client.model.Callback;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.irisnet.java.JSON;

/**
 * Data containing neccessary information to handle the enduser live check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class LiveDocumentCheckRequestData {
  public static final String SERIALIZED_NAME_CALLBACK = "callback";
  @SerializedName(SERIALIZED_NAME_CALLBACK)
  @javax.annotation.Nonnull
  private Callback callback;

  public static final String SERIALIZED_NAME_STATUS_URL = "statusUrl";
  @SerializedName(SERIALIZED_NAME_STATUS_URL)
  @javax.annotation.Nullable
  private URI statusUrl;

  public static final String SERIALIZED_NAME_END_USER_REDIRECT_URL = "endUserRedirectUrl";
  @SerializedName(SERIALIZED_NAME_END_USER_REDIRECT_URL)
  @javax.annotation.Nullable
  private URI endUserRedirectUrl;

  public static final String SERIALIZED_NAME_TOKEN_VALIDITY_IN_SECONDS = "tokenValidityInSeconds";
  @SerializedName(SERIALIZED_NAME_TOKEN_VALIDITY_IN_SECONDS)
  @javax.annotation.Nullable
  private Long tokenValidityInSeconds;

  public static final String SERIALIZED_NAME_DOCUMENT_HOLDER_ID = "documentHolderId";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_HOLDER_ID)
  @javax.annotation.Nullable
  private String documentHolderId;

  public static final String SERIALIZED_NAME_MINIMUM_ACCEPTED_AGE = "minimumAcceptedAge";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ACCEPTED_AGE)
  @javax.annotation.Nullable
  private Integer minimumAcceptedAge;

  public LiveDocumentCheckRequestData() {
  }

  public LiveDocumentCheckRequestData callback(@javax.annotation.Nonnull Callback callback) {
    this.callback = callback;
    return this;
  }

  /**
   * Get callback
   * @return callback
   */
  @javax.annotation.Nonnull
  public Callback getCallback() {
    return callback;
  }

  public void setCallback(@javax.annotation.Nonnull Callback callback) {
    this.callback = callback;
  }


  public LiveDocumentCheckRequestData statusUrl(@javax.annotation.Nullable URI statusUrl) {
    this.statusUrl = statusUrl;
    return this;
  }

  /**
   * The URL to send the intermediate status requests to. If not set, no intermediate status requests will be sent.
   * @return statusUrl
   */
  @javax.annotation.Nullable
  public URI getStatusUrl() {
    return statusUrl;
  }

  public void setStatusUrl(@javax.annotation.Nullable URI statusUrl) {
    this.statusUrl = statusUrl;
  }


  public LiveDocumentCheckRequestData endUserRedirectUrl(@javax.annotation.Nullable URI endUserRedirectUrl) {
    this.endUserRedirectUrl = endUserRedirectUrl;
    return this;
  }

  /**
   * If set the enduser is being redirected to this URL after the check is finished.
   * @return endUserRedirectUrl
   */
  @javax.annotation.Nullable
  public URI getEndUserRedirectUrl() {
    return endUserRedirectUrl;
  }

  public void setEndUserRedirectUrl(@javax.annotation.Nullable URI endUserRedirectUrl) {
    this.endUserRedirectUrl = endUserRedirectUrl;
  }


  public LiveDocumentCheckRequestData tokenValidityInSeconds(@javax.annotation.Nullable Long tokenValidityInSeconds) {
    this.tokenValidityInSeconds = tokenValidityInSeconds;
    return this;
  }

  /**
   * The validity duration of a started ident process in seconds. Defaults to 3600 seconds &#x3D; 60 minutes.
   * @return tokenValidityInSeconds
   */
  @javax.annotation.Nullable
  public Long getTokenValidityInSeconds() {
    return tokenValidityInSeconds;
  }

  public void setTokenValidityInSeconds(@javax.annotation.Nullable Long tokenValidityInSeconds) {
    this.tokenValidityInSeconds = tokenValidityInSeconds;
  }


  public LiveDocumentCheckRequestData documentHolderId(@javax.annotation.Nullable String documentHolderId) {
    this.documentHolderId = documentHolderId;
    return this;
  }

  /**
   * The documentHolderId from a previous successful live identification
   * @return documentHolderId
   */
  @javax.annotation.Nullable
  public String getDocumentHolderId() {
    return documentHolderId;
  }

  public void setDocumentHolderId(@javax.annotation.Nullable String documentHolderId) {
    this.documentHolderId = documentHolderId;
  }


  public LiveDocumentCheckRequestData minimumAcceptedAge(@javax.annotation.Nullable Integer minimumAcceptedAge) {
    this.minimumAcceptedAge = minimumAcceptedAge;
    return this;
  }

  /**
   * The minimum accepted age in years for a check. Defaults to 18 if not provided
   * @return minimumAcceptedAge
   */
  @javax.annotation.Nullable
  public Integer getMinimumAcceptedAge() {
    return minimumAcceptedAge;
  }

  public void setMinimumAcceptedAge(@javax.annotation.Nullable Integer minimumAcceptedAge) {
    this.minimumAcceptedAge = minimumAcceptedAge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveDocumentCheckRequestData liveDocumentCheckRequestData = (LiveDocumentCheckRequestData) o;
    return Objects.equals(this.callback, liveDocumentCheckRequestData.callback) &&
        Objects.equals(this.statusUrl, liveDocumentCheckRequestData.statusUrl) &&
        Objects.equals(this.endUserRedirectUrl, liveDocumentCheckRequestData.endUserRedirectUrl) &&
        Objects.equals(this.tokenValidityInSeconds, liveDocumentCheckRequestData.tokenValidityInSeconds) &&
        Objects.equals(this.documentHolderId, liveDocumentCheckRequestData.documentHolderId) &&
        Objects.equals(this.minimumAcceptedAge, liveDocumentCheckRequestData.minimumAcceptedAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callback, statusUrl, endUserRedirectUrl, tokenValidityInSeconds, documentHolderId, minimumAcceptedAge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveDocumentCheckRequestData {\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("    statusUrl: ").append(toIndentedString(statusUrl)).append("\n");
    sb.append("    endUserRedirectUrl: ").append(toIndentedString(endUserRedirectUrl)).append("\n");
    sb.append("    tokenValidityInSeconds: ").append(toIndentedString(tokenValidityInSeconds)).append("\n");
    sb.append("    documentHolderId: ").append(toIndentedString(documentHolderId)).append("\n");
    sb.append("    minimumAcceptedAge: ").append(toIndentedString(minimumAcceptedAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback");
    openapiFields.add("statusUrl");
    openapiFields.add("endUserRedirectUrl");
    openapiFields.add("tokenValidityInSeconds");
    openapiFields.add("documentHolderId");
    openapiFields.add("minimumAcceptedAge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callback");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveDocumentCheckRequestData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveDocumentCheckRequestData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveDocumentCheckRequestData is not found in the empty JSON string", LiveDocumentCheckRequestData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveDocumentCheckRequestData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveDocumentCheckRequestData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LiveDocumentCheckRequestData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `callback`
      Callback.validateJsonElement(jsonObj.get("callback"));
      if ((jsonObj.get("statusUrl") != null && !jsonObj.get("statusUrl").isJsonNull()) && !jsonObj.get("statusUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusUrl").toString()));
      }
      if ((jsonObj.get("endUserRedirectUrl") != null && !jsonObj.get("endUserRedirectUrl").isJsonNull()) && !jsonObj.get("endUserRedirectUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endUserRedirectUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endUserRedirectUrl").toString()));
      }
      if ((jsonObj.get("documentHolderId") != null && !jsonObj.get("documentHolderId").isJsonNull()) && !jsonObj.get("documentHolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentHolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentHolderId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveDocumentCheckRequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveDocumentCheckRequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveDocumentCheckRequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveDocumentCheckRequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveDocumentCheckRequestData>() {
           @Override
           public void write(JsonWriter out, LiveDocumentCheckRequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveDocumentCheckRequestData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveDocumentCheckRequestData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveDocumentCheckRequestData
   * @throws IOException if the JSON string is invalid with respect to LiveDocumentCheckRequestData
   */
  public static LiveDocumentCheckRequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveDocumentCheckRequestData.class);
  }

  /**
   * Convert an instance of LiveDocumentCheckRequestData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

