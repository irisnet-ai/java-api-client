/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.irisnet.java.JSON;

/**
 * Contains information on ageVerification sub-checks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class AgeVerificationSubChecks {
  /**
   * Indicates if the selfie image is genuine and not a photo of an image or of a screen
   */
  @JsonAdapter(FaceLivenessCheckEnum.Adapter.class)
  public enum FaceLivenessCheckEnum {
    PASSED("passed"),
    
    FAILED("failed"),
    
    NOT_PROCESSED("not_processed");

    private String value;

    FaceLivenessCheckEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FaceLivenessCheckEnum fromValue(String value) {
      for (FaceLivenessCheckEnum b : FaceLivenessCheckEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FaceLivenessCheckEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaceLivenessCheckEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaceLivenessCheckEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FaceLivenessCheckEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FaceLivenessCheckEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FACE_LIVENESS_CHECK = "faceLivenessCheck";
  @SerializedName(SERIALIZED_NAME_FACE_LIVENESS_CHECK)
  @javax.annotation.Nullable
  private FaceLivenessCheckEnum faceLivenessCheck;

  /**
   * Indicates if the estimated age is greater than or equal to a predefined minimum accepted age
   */
  @JsonAdapter(AgeValidationCheckEnum.Adapter.class)
  public enum AgeValidationCheckEnum {
    PASSED("passed"),
    
    FAILED("failed"),
    
    NOT_PROCESSED("not_processed");

    private String value;

    AgeValidationCheckEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgeValidationCheckEnum fromValue(String value) {
      for (AgeValidationCheckEnum b : AgeValidationCheckEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgeValidationCheckEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgeValidationCheckEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgeValidationCheckEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgeValidationCheckEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgeValidationCheckEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGE_VALIDATION_CHECK = "ageValidationCheck";
  @SerializedName(SERIALIZED_NAME_AGE_VALIDATION_CHECK)
  @javax.annotation.Nullable
  private AgeValidationCheckEnum ageValidationCheck;

  public AgeVerificationSubChecks() {
  }

  public AgeVerificationSubChecks faceLivenessCheck(@javax.annotation.Nullable FaceLivenessCheckEnum faceLivenessCheck) {
    this.faceLivenessCheck = faceLivenessCheck;
    return this;
  }

  /**
   * Indicates if the selfie image is genuine and not a photo of an image or of a screen
   * @return faceLivenessCheck
   */
  @javax.annotation.Nullable
  public FaceLivenessCheckEnum getFaceLivenessCheck() {
    return faceLivenessCheck;
  }

  public void setFaceLivenessCheck(@javax.annotation.Nullable FaceLivenessCheckEnum faceLivenessCheck) {
    this.faceLivenessCheck = faceLivenessCheck;
  }


  public AgeVerificationSubChecks ageValidationCheck(@javax.annotation.Nullable AgeValidationCheckEnum ageValidationCheck) {
    this.ageValidationCheck = ageValidationCheck;
    return this;
  }

  /**
   * Indicates if the estimated age is greater than or equal to a predefined minimum accepted age
   * @return ageValidationCheck
   */
  @javax.annotation.Nullable
  public AgeValidationCheckEnum getAgeValidationCheck() {
    return ageValidationCheck;
  }

  public void setAgeValidationCheck(@javax.annotation.Nullable AgeValidationCheckEnum ageValidationCheck) {
    this.ageValidationCheck = ageValidationCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AgeVerificationSubChecks ageVerificationSubChecks = (AgeVerificationSubChecks) o;
    return Objects.equals(this.faceLivenessCheck, ageVerificationSubChecks.faceLivenessCheck) &&
        Objects.equals(this.ageValidationCheck, ageVerificationSubChecks.ageValidationCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(faceLivenessCheck, ageValidationCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AgeVerificationSubChecks {\n");
    sb.append("    faceLivenessCheck: ").append(toIndentedString(faceLivenessCheck)).append("\n");
    sb.append("    ageValidationCheck: ").append(toIndentedString(ageValidationCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("faceLivenessCheck");
    openapiFields.add("ageValidationCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AgeVerificationSubChecks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AgeVerificationSubChecks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AgeVerificationSubChecks is not found in the empty JSON string", AgeVerificationSubChecks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AgeVerificationSubChecks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AgeVerificationSubChecks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("faceLivenessCheck") != null && !jsonObj.get("faceLivenessCheck").isJsonNull()) && !jsonObj.get("faceLivenessCheck").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `faceLivenessCheck` to be a primitive type in the JSON string but got `%s`", jsonObj.get("faceLivenessCheck").toString()));
      }
      // validate the optional field `faceLivenessCheck`
      if (jsonObj.get("faceLivenessCheck") != null && !jsonObj.get("faceLivenessCheck").isJsonNull()) {
        FaceLivenessCheckEnum.validateJsonElement(jsonObj.get("faceLivenessCheck"));
      }
      if ((jsonObj.get("ageValidationCheck") != null && !jsonObj.get("ageValidationCheck").isJsonNull()) && !jsonObj.get("ageValidationCheck").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ageValidationCheck` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ageValidationCheck").toString()));
      }
      // validate the optional field `ageValidationCheck`
      if (jsonObj.get("ageValidationCheck") != null && !jsonObj.get("ageValidationCheck").isJsonNull()) {
        AgeValidationCheckEnum.validateJsonElement(jsonObj.get("ageValidationCheck"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AgeVerificationSubChecks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AgeVerificationSubChecks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AgeVerificationSubChecks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AgeVerificationSubChecks.class));

       return (TypeAdapter<T>) new TypeAdapter<AgeVerificationSubChecks>() {
           @Override
           public void write(JsonWriter out, AgeVerificationSubChecks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AgeVerificationSubChecks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AgeVerificationSubChecks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AgeVerificationSubChecks
   * @throws IOException if the JSON string is invalid with respect to AgeVerificationSubChecks
   */
  public static AgeVerificationSubChecks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AgeVerificationSubChecks.class);
  }

  /**
   * Convert an instance of AgeVerificationSubChecks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

