/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.irisnet.java.client.model.Callback;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import de.irisnet.java.JSON;

/**
 * DocumentCheckRequestData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class DocumentCheckRequestData {
  public static final String SERIALIZED_NAME_CALLBACK = "callback";
  @SerializedName(SERIALIZED_NAME_CALLBACK)
  @javax.annotation.Nonnull
  private Callback callback;

  public static final String SERIALIZED_NAME_FRONT_IMAGE = "frontImage";
  @SerializedName(SERIALIZED_NAME_FRONT_IMAGE)
  @javax.annotation.Nonnull
  private String frontImage;

  public static final String SERIALIZED_NAME_BACK_IMAGE = "backImage";
  @SerializedName(SERIALIZED_NAME_BACK_IMAGE)
  @javax.annotation.Nullable
  private String backImage;

  public static final String SERIALIZED_NAME_SELFIE_IMAGE = "selfieImage";
  @SerializedName(SERIALIZED_NAME_SELFIE_IMAGE)
  @javax.annotation.Nullable
  private String selfieImage;

  public static final String SERIALIZED_NAME_MINIMUM_ACCEPTED_AGE = "minimumAcceptedAge";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ACCEPTED_AGE)
  @javax.annotation.Nullable
  private Integer minimumAcceptedAge;

  /**
   * The type of the document
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    PASSPORT("passport"),
    
    DRIVING_LICENSE("driving_license"),
    
    NATIONAL_IDENTITY_CARD("national_identity_card"),
    
    RESIDENCE_PERMIT("residence_permit"),
    
    VISA("visa"),
    
    UNKNOWN("unknown");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  @javax.annotation.Nullable
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_DOCUMENT_COUNTRY = "documentCountry";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_COUNTRY)
  @javax.annotation.Nullable
  private String documentCountry;

  public DocumentCheckRequestData() {
  }

  public DocumentCheckRequestData callback(@javax.annotation.Nonnull Callback callback) {
    this.callback = callback;
    return this;
  }

  /**
   * Get callback
   * @return callback
   */
  @javax.annotation.Nonnull
  public Callback getCallback() {
    return callback;
  }

  public void setCallback(@javax.annotation.Nonnull Callback callback) {
    this.callback = callback;
  }


  public DocumentCheckRequestData frontImage(@javax.annotation.Nonnull String frontImage) {
    this.frontImage = frontImage;
    return this;
  }

  /**
   * The base64 encoded front image of the document to be checked in either jpg or png file format
   * @return frontImage
   */
  @javax.annotation.Nonnull
  public String getFrontImage() {
    return frontImage;
  }

  public void setFrontImage(@javax.annotation.Nonnull String frontImage) {
    this.frontImage = frontImage;
  }


  public DocumentCheckRequestData backImage(@javax.annotation.Nullable String backImage) {
    this.backImage = backImage;
    return this;
  }

  /**
   * The base64 encoded back image of the document to be checked in either jpg or png file format
   * @return backImage
   */
  @javax.annotation.Nullable
  public String getBackImage() {
    return backImage;
  }

  public void setBackImage(@javax.annotation.Nullable String backImage) {
    this.backImage = backImage;
  }


  public DocumentCheckRequestData selfieImage(@javax.annotation.Nullable String selfieImage) {
    this.selfieImage = selfieImage;
    return this;
  }

  /**
   * The base64 encoded selfie image to be checked in either jpg or png file format
   * @return selfieImage
   */
  @javax.annotation.Nullable
  public String getSelfieImage() {
    return selfieImage;
  }

  public void setSelfieImage(@javax.annotation.Nullable String selfieImage) {
    this.selfieImage = selfieImage;
  }


  public DocumentCheckRequestData minimumAcceptedAge(@javax.annotation.Nullable Integer minimumAcceptedAge) {
    this.minimumAcceptedAge = minimumAcceptedAge;
    return this;
  }

  /**
   * The minimum accepted age in years for a DocumentCheck. Defaults to 18 if not provided
   * @return minimumAcceptedAge
   */
  @javax.annotation.Nullable
  public Integer getMinimumAcceptedAge() {
    return minimumAcceptedAge;
  }

  public void setMinimumAcceptedAge(@javax.annotation.Nullable Integer minimumAcceptedAge) {
    this.minimumAcceptedAge = minimumAcceptedAge;
  }


  public DocumentCheckRequestData documentType(@javax.annotation.Nullable DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The type of the document
   * @return documentType
   */
  @javax.annotation.Nullable
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(@javax.annotation.Nullable DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public DocumentCheckRequestData documentCountry(@javax.annotation.Nullable String documentCountry) {
    this.documentCountry = documentCountry;
    return this;
  }

  /**
   * The document&#39;s country in ISO 3166-1 alpha-2 format
   * @return documentCountry
   */
  @javax.annotation.Nullable
  public String getDocumentCountry() {
    return documentCountry;
  }

  public void setDocumentCountry(@javax.annotation.Nullable String documentCountry) {
    this.documentCountry = documentCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentCheckRequestData documentCheckRequestData = (DocumentCheckRequestData) o;
    return Objects.equals(this.callback, documentCheckRequestData.callback) &&
        Objects.equals(this.frontImage, documentCheckRequestData.frontImage) &&
        Objects.equals(this.backImage, documentCheckRequestData.backImage) &&
        Objects.equals(this.selfieImage, documentCheckRequestData.selfieImage) &&
        Objects.equals(this.minimumAcceptedAge, documentCheckRequestData.minimumAcceptedAge) &&
        Objects.equals(this.documentType, documentCheckRequestData.documentType) &&
        Objects.equals(this.documentCountry, documentCheckRequestData.documentCountry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callback, frontImage, backImage, selfieImage, minimumAcceptedAge, documentType, documentCountry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentCheckRequestData {\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("    frontImage: ").append(toIndentedString(frontImage)).append("\n");
    sb.append("    backImage: ").append(toIndentedString(backImage)).append("\n");
    sb.append("    selfieImage: ").append(toIndentedString(selfieImage)).append("\n");
    sb.append("    minimumAcceptedAge: ").append(toIndentedString(minimumAcceptedAge)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentCountry: ").append(toIndentedString(documentCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback");
    openapiFields.add("frontImage");
    openapiFields.add("backImage");
    openapiFields.add("selfieImage");
    openapiFields.add("minimumAcceptedAge");
    openapiFields.add("documentType");
    openapiFields.add("documentCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callback");
    openapiRequiredFields.add("frontImage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentCheckRequestData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentCheckRequestData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentCheckRequestData is not found in the empty JSON string", DocumentCheckRequestData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentCheckRequestData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentCheckRequestData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentCheckRequestData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `callback`
      Callback.validateJsonElement(jsonObj.get("callback"));
      if (!jsonObj.get("frontImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frontImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frontImage").toString()));
      }
      if ((jsonObj.get("backImage") != null && !jsonObj.get("backImage").isJsonNull()) && !jsonObj.get("backImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backImage").toString()));
      }
      if ((jsonObj.get("selfieImage") != null && !jsonObj.get("selfieImage").isJsonNull()) && !jsonObj.get("selfieImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfieImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfieImage").toString()));
      }
      if ((jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) && !jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the optional field `documentType`
      if (jsonObj.get("documentType") != null && !jsonObj.get("documentType").isJsonNull()) {
        DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      }
      if ((jsonObj.get("documentCountry") != null && !jsonObj.get("documentCountry").isJsonNull()) && !jsonObj.get("documentCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentCheckRequestData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentCheckRequestData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentCheckRequestData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentCheckRequestData.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentCheckRequestData>() {
           @Override
           public void write(JsonWriter out, DocumentCheckRequestData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentCheckRequestData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentCheckRequestData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentCheckRequestData
   * @throws IOException if the JSON string is invalid with respect to DocumentCheckRequestData
   */
  public static DocumentCheckRequestData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentCheckRequestData.class);
  }

  /**
   * Convert an instance of DocumentCheckRequestData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

