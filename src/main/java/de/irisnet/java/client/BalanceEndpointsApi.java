/*
 * Irisnet API
 * Artificial Intelligence (AI) for image- and video-processing in real-time. This is an interactive documentation where you can quickly look up the endpoints and their schemas, while having the opportunity to try things out for yourself.  In the list below, you can see the available endpoints of the API, which can be expanded by clicking on them. Each expanded endpoint lists the request parameters (if available) and the request body (if available). The request body can list some example bodies and the schema, explaining each model in detail.  Additionally you'll find a 'Try it out' button that allows you to enter your custom parameters and custom body and execute that against the API. <b>Be sure to enter your license key to authorize the requests before using this documentation interactively.</b>  The responses section in the expanded endpoint lists the possible responses with their corresponding status codes. If you've executed an API call it will also show you the response from the server.  Underneath the endpoints you'll find the model schemas. These are the models used for the requests and responses. If you click on the right arrow, you can expand the model and get a description of the model and the model parameters. For nested models, you can keep clicking the right arrow for further details.  Clicking the link below the title at the top of this page opens the [OpenAPI specification](https://swagger.io/specification/) (OAS3) in JSON format. The OAS3 Spec allows the generation of clients in many programming languages. There are several free client generators available that can be used to get started easily.
 *
 * The version of the OpenAPI document: v2
 * Contact: info@irisnet.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.irisnet.java.client;

import de.irisnet.java.ApiCallback;
import de.irisnet.java.ApiClient;
import de.irisnet.java.ApiException;
import de.irisnet.java.ApiResponse;
import de.irisnet.java.Configuration;
import de.irisnet.java.Pair;
import de.irisnet.java.ProgressRequestBody;
import de.irisnet.java.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.irisnet.java.client.model.ApiNotice;
import de.irisnet.java.client.model.LicenseInfo;
import de.irisnet.java.client.model.Pricing;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BalanceEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BalanceEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BalanceEndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCost
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCostCall(UUID configId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cost/{configId}"
            .replace("{" + "configId" + "}", localVarApiClient.escapeString(configId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "LICENSE-KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCostValidateBeforeCall(UUID configId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling getCost(Async)");
        }

        return getCostCall(configId, _callback);

    }

    /**
     * Get the cost of the configuration for a single image.
     * The cost is subtracted from the license key after a successful check-image operation.
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing getCost(UUID configId) throws ApiException {
        ApiResponse<Pricing> localVarResp = getCostWithHttpInfo(configId);
        return localVarResp.getData();
    }

    /**
     * Get the cost of the configuration for a single image.
     * The cost is subtracted from the license key after a successful check-image operation.
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> getCostWithHttpInfo(UUID configId) throws ApiException {
        okhttp3.Call localVarCall = getCostValidateBeforeCall(configId, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the cost of the configuration for a single image. (asynchronously)
     * The cost is subtracted from the license key after a successful check-image operation.
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCostAsync(UUID configId, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCostValidateBeforeCall(configId, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicenseInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The entered license key was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/info/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "LICENSE-KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicenseInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLicenseInfoCall(_callback);

    }

    /**
     * Get information for the given license key.
     * Get the LicenseInfo schema for the given license key in the authorization header.
     * @return LicenseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The entered license key was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public LicenseInfo getLicenseInfo() throws ApiException {
        ApiResponse<LicenseInfo> localVarResp = getLicenseInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get information for the given license key.
     * Get the LicenseInfo schema for the given license key in the authorization header.
     * @return ApiResponse&lt;LicenseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The entered license key was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseInfo> getLicenseInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLicenseInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<LicenseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information for the given license key. (asynchronously)
     * Get the LicenseInfo schema for the given license key in the authorization header.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> The entered license key was not found. </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> successful operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseInfoAsync(final ApiCallback<LicenseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicenseInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<LicenseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCost
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param frames The number of frames that the AI should check. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCostCall(UUID configId, Long frames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cost/{configId}/{frames}"
            .replace("{" + "configId" + "}", localVarApiClient.escapeString(configId.toString()))
            .replace("{" + "frames" + "}", localVarApiClient.escapeString(frames.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "LICENSE-KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCostValidateBeforeCall(UUID configId, Long frames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling getVideoCost(Async)");
        }

        // verify the required parameter 'frames' is set
        if (frames == null) {
            throw new ApiException("Missing the required parameter 'frames' when calling getVideoCost(Async)");
        }

        return getVideoCostCall(configId, frames, _callback);

    }

    /**
     * Get the cost of the configuration for moving images.
     * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param frames The number of frames that the AI should check. (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing getVideoCost(UUID configId, Long frames) throws ApiException {
        ApiResponse<Pricing> localVarResp = getVideoCostWithHttpInfo(configId, frames);
        return localVarResp.getData();
    }

    /**
     * Get the cost of the configuration for moving images.
     * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param frames The number of frames that the AI should check. (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> getVideoCostWithHttpInfo(UUID configId, Long frames) throws ApiException {
        okhttp3.Call localVarCall = getVideoCostValidateBeforeCall(configId, frames, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the cost of the configuration for moving images. (asynchronously)
     * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param frames The number of frames that the AI should check. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCostAsync(UUID configId, Long frames, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCostValidateBeforeCall(configId, frames, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCost1
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param fps The frames per second of the video or stream. (required)
     * @param duration The duration in seconds of the video or stream. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCost1Call(UUID configId, Integer fps, Long duration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cost/{configId}/{fps}/{duration}"
            .replace("{" + "configId" + "}", localVarApiClient.escapeString(configId.toString()))
            .replace("{" + "fps" + "}", localVarApiClient.escapeString(fps.toString()))
            .replace("{" + "duration" + "}", localVarApiClient.escapeString(duration.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "LICENSE-KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCost1ValidateBeforeCall(UUID configId, Integer fps, Long duration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configId' is set
        if (configId == null) {
            throw new ApiException("Missing the required parameter 'configId' when calling getVideoCost1(Async)");
        }

        // verify the required parameter 'fps' is set
        if (fps == null) {
            throw new ApiException("Missing the required parameter 'fps' when calling getVideoCost1(Async)");
        }

        // verify the required parameter 'duration' is set
        if (duration == null) {
            throw new ApiException("Missing the required parameter 'duration' when calling getVideoCost1(Async)");
        }

        return getVideoCost1Call(configId, fps, duration, _callback);

    }

    /**
     * Get the cost of the configuration for moving images.
     * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param fps The frames per second of the video or stream. (required)
     * @param duration The duration in seconds of the video or stream. (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing getVideoCost1(UUID configId, Integer fps, Long duration) throws ApiException {
        ApiResponse<Pricing> localVarResp = getVideoCost1WithHttpInfo(configId, fps, duration);
        return localVarResp.getData();
    }

    /**
     * Get the cost of the configuration for moving images.
     * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param fps The frames per second of the video or stream. (required)
     * @param duration The duration in seconds of the video or stream. (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> getVideoCost1WithHttpInfo(UUID configId, Integer fps, Long duration) throws ApiException {
        okhttp3.Call localVarCall = getVideoCost1ValidateBeforeCall(configId, fps, duration, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the cost of the configuration for moving images. (asynchronously)
     * The cost is subtracted from the license key after a successful check operation for moving images.  &lt;b&gt;NOTICE: The returned cost is an approximation. The exact cost can only be determined during the check operation.&lt;b&gt;
     * @param configId The configuration id from the Basic Configuration operations. (required)
     * @param fps The frames per second of the video or stream. (required)
     * @param duration The duration in seconds of the video or stream. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cost of the given configuration. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The ai could not handle the request because it is either overloaded or currently down for maintenance. This is a temporary state. A &#39;Retry-After&#39; Header is included in the response to signal the client to retry after a certain amount of seconds. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> configId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCost1Async(UUID configId, Integer fps, Long duration, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCost1ValidateBeforeCall(configId, fps, duration, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
